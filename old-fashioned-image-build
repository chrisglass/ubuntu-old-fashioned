#!/bin/bash

# This should be put in your PATH and then invoked (as root) from a checkout
# of livecd-rootfs that you'd like to build.

# Original user-data script by rcj, weaponized by tribaal

# TODO: Reuse buildd environment if found.

MINIMIZED=""
SERIES=""
USE_CHROOT_CACHE=false

while :; do
    case "$1" in
        --minimized)
            MINIMIZED="--subproject minimized"
            ;;
        --series)
            if [ "$2" ]; then
                SERIES="$2"
                shift
            else
                echo "ERROR: --series requires a non-empty argument."
                exit 1
            fi
            ;;
        --use-chroot-cache)
            USE_CHROOT_CACHE=true
            ;;
        -?*)
            echo "WARNING: Unknown option or argument ignored: $1"
            exit 1
            ;;
        *)
            break
    esac

    shift
done

if [ x$SERIES = "x" ] ; then
    echo "Missing required '--series' argument e.g. '--series xenial'"
    exit 1
fi

DEPENDENCIES=(launchpad-buildd bzr python-ubuntutools)

for dep in ${DEPENDENCIES[@]} ; do
    if ! [[ $(dpkg -l | grep ^ii | grep $dep) != "" ]] ; then
        echo "Please install the required dependencies for this script:"
        echo "  sudo add-apt-repository -y -u ppa:launchpad/ppa"
        echo "  sudo apt install -y ${DEPENDENCIES[@]}"
        exit 1
    fi
done

if ! [ -f get-ppa-fingerprint ] || ! [ -d live-build ] ; then
    echo 'Cannot find the expected livecd-rootfs tree structure in $PWD.'
    echo 'Are you sure you are running this from a livecd-rootfs branch?'
    exit 1
fi

# Setup code
#*******************
# The real script

set -xe

OLD_FASHIONED_BUILD_CACHE="/tmp/old-fashioned-builder"
UAT_CHECKOUT="$OLD_FASHIONED_BUILD_CACHE/uat"
CHROOT_ARCHIVE_NAME="chroot-ubuntu-$SERIES-amd64.tar.bz"
CHROOT_ARCHIVE="$OLD_FASHIONED_BUILD_CACHE/$CHROOT_ARCHIVE_NAME"
OUTPUT_DIRECTORY=~/build.output
LIVEFS_NAME="LOCAL_IMAGES_BUILD"
SERIAL="$(date +%Y%m%d.%H%M)"

mkdir -p $OLD_FASHIONED_BUILD_CACHE

# Get the chroot filesystem from Launchpad if there isn't already one locally
# we could reuse.
if ! [ -f $CHROOT_ARCHIVE ] || [ $USE_CHROOT_CACHE = false ] ; then
    echo "Downloading chroot filesystem from launchpad."
    rm -rf $UAT_CHECKOUT
    bzr export $UAT_CHECKOUT lp:~ubuntu-archive/ubuntu-archive-tools/trunk
    $UAT_CHECKOUT/manage-chroot -a amd64 -s $SERIES info
    $UAT_CHECKOUT/manage-chroot -a amd64 -s $SERIES -f $CHROOT_ARCHIVE get
else
    echo "Reusing chroot tarball $CHROOT_ARCHIVE"
fi

# Set the time with NTP, untar the chroot, mount it.
# Use a public NTP server
sudo sed -i 's/ntp\.buildd/0\.pool\.ntp\.org/g' \
  /etc/launchpad-buildd/default

/usr/share/launchpad-buildd/slavebin/slave-prep
/usr/share/launchpad-buildd/slavebin/in-target unpack-chroot --backend=lxd \
  --series=$SERIES --arch=amd64 $LIVEFS_NAME $CHROOT_ARCHIVE
/usr/share/launchpad-buildd/slavebin/in-target mount-chroot --backend=lxd \
  --series=$SERIES --arch=amd64 $LIVEFS_NAME

# Inject squid proxy config in the LXC if one exists in the host.
SQUID_ADDRESS=$(cat /etc/apt/apt.conf.d/* | sed -n 's/Acquire::http::Proxy "\(.*\)";/\1/p')
SQUID_TMP_CONFIG=/tmp/30squid-proxy
HTTP_PROXY=""
if [ x"$SQUID_ADDRESS" != 'x' ] ; then
    HTTP_PROXY="--http-proxy=$SQUID_ADDRESS"
    cat > /tmp/30squid-proxy << EOF
Acquire::http::Proxy "$SQUID_ADDRESS";
EOF
	lxc file push $SQUID_TMP_CONFIG lp-$SERIES-amd64/etc/apt/apt.conf.d/30squid-proxy
fi

# Use the same apt mirror as the host
export MIRROR=$(grep archive /etc/apt/sources.list|head -1 | \
               cut -d' ' -f2 | cut -d'/' -f3)
/usr/share/launchpad-buildd/slavebin/in-target override-sources-list \
  --backend=lxd --series=$SERIES --arch=amd64 $LIVEFS_NAME \
    "deb http://$MIRROR/ubuntu $SERIES main restricted universe multiverse" \
    "deb http://$MIRROR/ubuntu $SERIES-security main restricted universe multiverse" \
    "deb http://$MIRROR/ubuntu $SERIES-updates main restricted universe multiverse"

/usr/share/launchpad-buildd/slavebin/in-target update-debian-chroot \
  --backend=lxd --series=$SERIES --arch=amd64 $LIVEFS_NAME

# Change the hostname to keep livecd-rootfs from mistaking this
# as a buildd and setting the mirror url to ftpinternal
lxc exec lp-$SERIES-amd64 -- hostname standalone-lp-$SERIES-amd64

# Inject the files from the current tree in the right place in the LXD
# container.
# First install livecd-rootfs. We will replace the bulk of the livecd-rootfs
# code with our local copy
lxc exec lp-$SERIES-amd64 -- apt-get install -y livecd-rootfs

# Remove and recreate the livecd-rootfs code we will be replacing with code
# in our current directory
lxc exec lp-$SERIES-amd64 -- rm -rf /usr/share/livecd-rootfs
lxc exec lp-$SERIES-amd64 -- mkdir -p /usr/share/livecd-rootfs
# Old LXCs don't have recursive push... so we tar and untar instead.
tar czvf $OLD_FASHIONED_BUILD_CACHE/live-build.tar.gz .
lxc file push $OLD_FASHIONED_BUILD_CACHE/live-build.tar.gz lp-$SERIES-amd64/usr/share/livecd-rootfs/
lxc exec lp-$SERIES-amd64 -- tar xzvf /usr/share/livecd-rootfs/live-build.tar.gz -C /usr/share/livecd-rootfs/

# Actually build.
time /usr/share/launchpad-buildd/slavebin/in-target buildlivefs \
  --backend=lxd --series=$SERIES --arch=amd64 $LIVEFS_NAME $HTTP_PROXY \
  --project ubuntu-cpc $MINIMIZED --datestamp $SERIAL --image-format ext4

echo "Copying files out to $OUTPUT_DIRECTORY"
rm -rf $OUTPUT_DIRECTORY
mkdir $OUTPUT_DIRECTORY
lxc file pull lp-$SERIES-amd64/build/binary.log $OUTPUT_DIRECTORY/;
time for FILE in `lxc exec lp-$SERIES-amd64 -- find /build -mindepth 1 \
                  \! -type d \! -type l -name 'livecd.*' -print`; do
    echo $FILE
    lxc file pull lp-$SERIES-amd64$FILE $OUTPUT_DIRECTORY/
done

# Cleanup the builder LXD.
/usr/share/launchpad-buildd/slavebin/in-target scan-for-processes \
  --backend=lxd --series=$SERIES --arch=amd64 $LIVEFS_NAME

/usr/share/launchpad-buildd/slavebin/in-target umount-chroot \
  --backend=lxd --series=$SERIES --arch=amd64 $LIVEFS_NAME

/usr/share/launchpad-buildd/slavebin/in-target remove-build \
  --backend=lxd --series=$SERIES --arch=amd64 $LIVEFS_NAME
