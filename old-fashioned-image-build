#!/bin/bash

# This should be put in your PATH and then invoked (as root) from a checkout
# of livecd-rootfs that you'd like to build.

# Original user-data script by rcj, weaponized by tribaal

# TODO: Reuse buildd environment if found.

IMG_FORMAT="ext4"
PROJECT="ubuntu-cpc"
SUBPROJECT=""
SERIES=""
USE_CHROOT_CACHE=false
CLEANUP=true
IMAGE_TARGET=""
REPO_SNAPSHOT=""
SNAP_COHORT=""
INTERACTIVE_HOOKS=false

while :; do
    case "$1" in
        --minimized)
            SUBPROJECT="--subproject minimized"
            ;;
        --subproject)
            SUBPROJECT="--subproject $2"
            shift
            ;;
        --img_format)
            IMG_FORMAT="$2"
            shift
            ;;
        --project)
            if [ "$2" ]; then
                PROJECT="$2"
                shift
            fi
            ;;
        --series)
            if [ "$2" ]; then
                SERIES="$2"
                shift
            else
                echo "ERROR: --series requires a non-empty argument."
                exit 1
            fi
            ;;
        --use-chroot-cache)
            USE_CHROOT_CACHE=true
            ;;
        --no-cleanup)
            CLEANUP=false
            ;;
        --image-target)
            IMAGE_TARGET="$IMAGE_TARGET --image-target $2"
            shift
            ;;
        --repo-snapshot-stamp)
            REPO_SNAPSHOT="--repo-snapshot-stamp $2"
            shift
            ;;
        --snap-cohort-key)
            SNAP_COHORT="--cohort-key $2"
            shift
            ;;
        --interactive-hooks)
            INTERACTIVE_HOOKS=true
            shift
            ;;
        -?*)
            echo "WARNING: Unknown option or argument ignored: $1"
            exit 1
            ;;
        *)
            break
    esac

    shift
done

case `arch` in
    aarch64) ARCH=arm64;;
    x86_64) ARCH=amd64;;
    *) echo "Unrecognized arch"; exit 1;;
esac

if [ x$SERIES = "x" ] ; then
    echo "Missing required '--series' argument e.g. '--series xenial'"
    exit 1
fi

DEPENDENCIES=(launchpad-buildd bzr python-ubuntutools)

for dep in ${DEPENDENCIES[@]} ; do
    if ! [[ $(dpkg -l | grep ^ii | grep $dep) != "" ]] ; then
        echo "Please install the required dependencies for this script:"
        echo "  sudo add-apt-repository -y -u ppa:launchpad/ppa"
        echo "  sudo apt install -y ${DEPENDENCIES[@]}"
        exit 1
    fi
done

if ! [ -f get-ppa-fingerprint ] || ! [ -d live-build ] ; then
    echo 'Cannot find the expected livecd-rootfs tree structure in $PWD.'
    echo 'Are you sure you are running this from a livecd-rootfs branch?'
    exit 1
fi

# Setup code
#*******************
# The real script

set -xe

OLD_FASHIONED_BUILD_CACHE="/tmp/old-fashioned-builder"
UAT_CHECKOUT="$OLD_FASHIONED_BUILD_CACHE/uat"
LIVECD_ROOTFS_COPY="$OLD_FASHIONED_BUILD_CACHE/livecd-rootfs"
CHROOT_ARCHIVE_NAME="chroot-ubuntu-$SERIES-${ARCH}.tar.bz"
CHROOT_ARCHIVE="$OLD_FASHIONED_BUILD_CACHE/$CHROOT_ARCHIVE_NAME"
OUTPUT_DIRECTORY=~/build.output
LIVEFS_NAME="LOCAL_IMAGES_BUILD"
SERIAL="$(date +%Y%m%d.%H%M)"

mkdir -p $OLD_FASHIONED_BUILD_CACHE

if [ $INTERACTIVE_HOOKS = true ] ; then
    rm -rf $LIVECD_ROOTFS_COPY
    cp -aR ./ $LIVECD_ROOTFS_COPY
    cd $LIVECD_ROOTFS_COPY

    cat > 001-debug.binary << "EOF"
#!/bin/bash

mknod debug.in p

at_exit() {
    rm -f debug.in
}
trap at_exit EXIT

/bin/bash -x < debug.in 2>&1 &

pid=$!

while ps -p $pid >/dev/null 2>&1
do
    sleep 1
done > debug.in
EOF

    rename 's/.binary$/.binary.disabled/' $(find live-build -name '*.binary')
    find live-build -type d -name 'hooks' -exec cp 001-debug.binary {} \;
    rm 001-debug.binary
fi

# Get the chroot filesystem from Launchpad if there isn't already one locally
# we could reuse.
if ! [ -f $CHROOT_ARCHIVE ] || [ $USE_CHROOT_CACHE = false ] ; then
    echo "Downloading chroot filesystem from launchpad."
    rm -rf $UAT_CHECKOUT
    bzr export $UAT_CHECKOUT lp:~ubuntu-archive/ubuntu-archive-tools/trunk
    $UAT_CHECKOUT/manage-chroot -a ${ARCH} -s $SERIES info
    $UAT_CHECKOUT/manage-chroot -a ${ARCH} -s $SERIES -f $CHROOT_ARCHIVE get
else
    echo "Reusing chroot tarball $CHROOT_ARCHIVE"
fi

# Set the time with NTP, untar the chroot, mount it.
# Use a public NTP server
sudo sed -i 's/ntp\.buildd/0\.pool\.ntp\.org/g' \
  /etc/launchpad-buildd/default

/usr/share/launchpad-buildd/bin/builder-prep
/usr/share/launchpad-buildd/bin/in-target unpack-chroot --backend=lxd \
  --series=$SERIES --arch=${ARCH} $LIVEFS_NAME $CHROOT_ARCHIVE
/usr/share/launchpad-buildd/bin/in-target mount-chroot --backend=lxd \
  --series=$SERIES --arch=${ARCH} $LIVEFS_NAME

# Inject squid proxy config in the LXC if one exists in the host.
SQUID_ADDRESS=$(cat /etc/apt/apt.conf.d/* | sed -n 's/Acquire::http::Proxy "\(.*\)";/\1/p')
SQUID_TMP_CONFIG=/tmp/30squid-proxy
HTTP_PROXY=""
if [ x"$SQUID_ADDRESS" != 'x' ] ; then
    HTTP_PROXY="--http-proxy=$SQUID_ADDRESS"
    cat > /tmp/30squid-proxy << EOF
Acquire::http::Proxy "$SQUID_ADDRESS";
EOF
	lxc file push $SQUID_TMP_CONFIG lp-$SERIES-${ARCH}/etc/apt/apt.conf.d/30squid-proxy
fi

# Use the same apt mirror as the host
export MIRROR=$(egrep "(archive|ports)" /etc/apt/sources.list|head -1 | \
               cut -d' ' -f2 | cut -d'/' -f3)
export MIRROR_PATH=$(egrep "(archive|ports)" /etc/apt/sources.list|head -1 | \
               cut -d' ' -f2 | cut -d'/' -f4)

/usr/share/launchpad-buildd/bin/in-target override-sources-list \
  --backend=lxd --series=$SERIES --arch=${ARCH} $LIVEFS_NAME \
    "deb http://$MIRROR/${MIRROR_PATH} $SERIES main restricted universe multiverse" \
    "deb http://$MIRROR/${MIRROR_PATH} $SERIES-security main restricted universe multiverse" \
    "deb http://$MIRROR/${MIRROR_PATH} $SERIES-updates main restricted universe multiverse"

/usr/share/launchpad-buildd/bin/in-target update-debian-chroot \
  --backend=lxd --series=$SERIES --arch=${ARCH} $LIVEFS_NAME

# Inject the files from the current tree in the right place in the LXD
# container.
# First install livecd-rootfs. We will replace the bulk of the livecd-rootfs
# code with our local copy. Without this livecd-rootfs is installed by
# buildlivefs (below) overwriting changes
lxc exec lp-$SERIES-${ARCH} -- apt-get install -y livecd-rootfs

# Remove and recreate the livecd-rootfs code we will be replacing with code
# in our current directory
lxc exec lp-$SERIES-${ARCH} -- rm -rf /usr/share/livecd-rootfs
lxc exec lp-$SERIES-${ARCH} -- mkdir -p /usr/share/livecd-rootfs
# Old LXCs don't have recursive push... so we tar and untar instead.
tar czvf $OLD_FASHIONED_BUILD_CACHE/live-build.tar.gz .
lxc file push $OLD_FASHIONED_BUILD_CACHE/live-build.tar.gz lp-$SERIES-${ARCH}/usr/share/livecd-rootfs/
lxc exec lp-$SERIES-${ARCH} -- tar xzvf /usr/share/livecd-rootfs/live-build.tar.gz -C /usr/share/livecd-rootfs/

# Actually build.
time /usr/share/launchpad-buildd/bin/in-target buildlivefs \
  --backend=lxd --series=$SERIES --arch=${ARCH} $LIVEFS_NAME $HTTP_PROXY \
  --project $PROJECT $SUBPROJECT --datestamp $SERIAL --image-format $IMG_FORMAT \
  $IMAGE_TARGET $REPO_SNAPSHOT $SNAP_COHORT

echo "Copying files out to $OUTPUT_DIRECTORY"
rm -rf $OUTPUT_DIRECTORY
mkdir $OUTPUT_DIRECTORY
lxc file pull lp-$SERIES-${ARCH}/build/binary.log $OUTPUT_DIRECTORY/;
time for FILE in `lxc exec lp-$SERIES-${ARCH} -- find /build -mindepth 1 \
                  \! -type d \! -type l -name 'livecd.*' -print`; do
    echo $FILE
    lxc file pull lp-$SERIES-${ARCH}$FILE $OUTPUT_DIRECTORY/
done

if [ $CLEANUP = false ] ; then
    echo "Exiting without cleanup, --no-cleanup specified"
    exit 0
fi

# Cleanup the builder LXD.
/usr/share/launchpad-buildd/bin/in-target scan-for-processes \
  --backend=lxd --series=$SERIES --arch=${ARCH} $LIVEFS_NAME

/usr/share/launchpad-buildd/bin/in-target umount-chroot \
  --backend=lxd --series=$SERIES --arch=${ARCH} $LIVEFS_NAME

/usr/share/launchpad-buildd/bin/in-target remove-build \
  --backend=lxd --series=$SERIES --arch=${ARCH} $LIVEFS_NAME
